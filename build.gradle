buildscript {
    ext.kotlin_version = '2.0.0-Beta2'
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

    }
}

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'



version = '0.4.0-1.20.1'
group = 'kenza.tfg_ores' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'tfg_ores'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

def dataOutput1 = 'src/main/generated'

sourceSets {
    main {
        resources {
            srcDirs += dataOutput1
//            if (gradle.startParameter.taskNames == ["build"]) {
//                srcDirs += dataOutput2
//            }
        }
    }
}



println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'tfg_ores'
            mods {
                tfg_ores {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'tfg_ores'

            mods {
                tfg_ores {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'rosia'

            mods {
                tfg_ores {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'rosia', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                tfg_ores {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven{ url = "https://maven.blamejared.com"} // Patchouli
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }

//    maven {
//            // Shedaniel's maven (Architectury API)
//            url = "https://maven.architectury.dev",
//    )
//
//    maven (
//            // saps.dev Maven (KubeJS and Rhino)
//            url = "https://maven.saps.dev/releases"
//    )

     flatDir {
         dir 'libs'
     }
}

def kubejs_version = "2001.6.4-build.95"
def rhino_version = "2001.2.2-build.13"
def architectury_version = "9.1.12"

dependencies {
//    compileOnly (fileTree(dir: 'libs', include: ['*.jar']))
//    runtimeOnly (fileTree(dir: 'libs', include: ['*.jar']))
    implementation 'org.moditect:moditect-org-parent:1.2.0.Final'


    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.20.1-47.2.6'



    // compile against the JEI API but do not include it at runtime
//    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
//    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    compileOnly(fg.deobf("mezz.jei:jei-$mc_version-forge-api:$jei_version"))
    compileOnly(fg.deobf("mezz.jei:jei-$mc_version-common-api:$jei_version"))
    runtimeOnly(fg.deobf("mezz.jei:jei-$mc_version-forge:$jei_version"))


    // https://www.curseforge.com/minecraft/mc-mods/terrafirmacraft
    implementation fg.deobf("curse.maven:tfc-302973:${tfc_version}")

    // Patchouli
    // We need to compile against the full JAR, not just the API, because we do some egregious hacks.
    compileOnly(fg.deobf("vazkii.patchouli:Patchouli:${patchouliVersion}"))
    runtimeOnly(fg.deobf("vazkii.patchouli:Patchouli:${patchouliVersion}"))

    // Jade / The One Probe
    compileOnly(fg.deobf("curse.maven:jade-324717:${jade_version}"))
    compileOnly(fg.deobf("curse.maven:top-245211:${top_version}"))
    // Only use Jade at runtime
    runtimeOnly(fg.deobf("curse.maven:jade-324717:${jade_version}"))
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

//    runtimeOnly (fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}"))
//    runtimeOnly (fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}"))
//    runtimeOnly (fg.deobf("dev.architectury:architectury-forge:${architectury_version}"))


    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "rosia",
                "Specification-Vendor"    : "rosiasareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "rosiasareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task copyJar(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into 'C:\\Users\\Dmitry\\AppData\\Roaming\\PollyMC\\instances\\TerraFirmaGreg-1.20-0.1.2-cf\\minecraft\\mods'
}

build.dependsOn copyJar


// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
